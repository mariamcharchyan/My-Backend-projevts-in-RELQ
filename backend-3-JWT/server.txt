////---1-----------------------------------------------------------------------------------------
const express = require('express')
const sqlite3 = require('sqlite3').verbose()
const app = express()
const port = 4000

let db = new sqlite3.Database('database.db')
db.run('CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT)')

app.get('/',(req,res) =>{
    res.send('Hello World!')
})

app.listen(port, () => {
    console.log(`Example app listening on port ${port}`);
})
//Brauzerum ktpi 'Hello World!' 





////---2-----------------------------------------------------------------------------------------
////tvyal enq avelacnum
const express = require('express')
const sqlite3 = require('sqlite3').verbose()
const CryptoJS = require('crypto-js')
const app = express()
const port = 4000
const cors = require('cors')

app.use(cors());
app.use(express.json());

let db = new sqlite3.Database('database.db')
db.run('CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT)')

app.post('/register',(req, res) => {
    const username = req.body.username;
    const password = req.body.password;
    const hashed_password = CryptoJS.SHA256(password).toString();
    let sql = 'INSERT INTO users (username, password) VALUES (?, ?)';
    db.run(sql,[username, hashed_password], function(err){
        if(err){
            res.send(JSON.stringify({status: 'Error Reigstering'}));
        }
        res.send(JSON.stringify({status: 'User Created'}));
    })
})

app.get('/',(req,res) =>{
    res.send('Hello World!')
})

app.listen(port, () => {
    console.log(`Example app listening on port ${port}`);
})




////---3----------------------------------------------------------------------------------------
///log in/ erkrort posty
app.post('/login', (req, res) => {
  const username = req.body.username
  const password = req.body.password
  const hashed_password = CryptoJS.SHA256(password).toString();
  let sql = "SELECT * from users WHERE username = ?"
  db.get(sql,[username], function(err, row){
    if(username == row.username && hashed_password == row.password) {
        res.send(JSON.stringify({status: "Logged in"}));
    }else {
        res.send(JSON.stringify({status: "Wrong credentials"}));
    }
  }) 
})





/////---4--------------------------------------------------------------------------------------
/// npm i jsonwebtoken

const express = require('express')
const sqlite3 = require('sqlite3').verbose()
const CryptoJS = require('crypto-js')
const jwt = require('jsonwebtoken')
const app = express()
const port = 4000
const cors = require('cors')

app.use(cors());
app.use(express.json());

let db = new sqlite3.Database('database.db')
db.run('CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT)')

const SECRET = "supersecrettoken"
function generateAccessToken(username) {
    return jwt.sign({username}, SECRET, { expiresIn: '36000s' });
}
let token = generateAccessToken("test")
console.log(token)

app.get('/',(req,res) =>{
    res.send('Hello World!')
})

app.post('/register',(req, res) => {
    const username = req.body.username;
    const password = req.body.password;
    const hashed_password = CryptoJS.SHA256(password).toString();
    let sql = 'INSERT INTO users (username, password) VALUES (?, ?)';
    db.run(sql,[username, hashed_password], function(err){
        if(err){
            res.send(JSON.stringify({status: 'Error Reigstering'}));
        }
        res.send(JSON.stringify({status: 'User Created'}));
    })
})

app.post('/login', (req, res) => {
  const username = req.body.username
  const password = req.body.password
  const hashed_password = CryptoJS.SHA256(password).toString();
  let sql = "SELECT * from users WHERE username = ?"
  db.get(sql,[username], function(err, row){
    console.log(row)
    if(username == row.username && hashed_password == row.password) {
        res.send(JSON.stringify({status: "Logged in", jwt: token}));
    }else {
        res.send(JSON.stringify({status: "Wrong credentials"}));
    }
  }) 
})


app.listen(port, () => {
    console.log(`Example app listening on port ${port}`);
})





/////---5--------------------------------------------------------------------------------------





/////---6--------------------------------------------------------------------------------------
// https://jwt.io/
// https://www.base64encode.org/
// https://codebeautify.org/generate-random-string

const express = require('express')
const sqlite3 = require('sqlite3').verbose();
const CryptoJS = require('crypto-js');
const app = express()
app.use(express.json())
const port = 5000
const _ = require('lodash/lodash');
const jwt = require('jsonwebtoken');
require('dotenv').config()

const db = new sqlite3.Database('database.db')
db.run("CREATE TABLE IF NOT EXISTS users(username TEXT, password TEXT)")
const  SECRET = process.env.SECRET
console.log(SECRET);

function generateAccessToken(username) {
  return jwt.sign({username}, SECRET, { expiresIn: '36000s' });
}

function authenticateToken(req, res, next) {
  const token = req.headers.authorization
  console.log(token);
  if (token == null) return res.sendStatus(401) 
  jwt.verify(token, SECRET, (err, user) => {
    if (err) return res.sendStatus(403) 
    next()
  })
}

function checkUser(req,res){
  const token=req.headers.authorization
  const decoded=jwt.decode(token)
  console.log(decoded);
  const username = decoded.username
  return username
}
app.get('/', authenticateToken, (req, res) => {
  const username = checkUser(req,res)
  res.send(Hello ${username}!)
})

app.post('/register', (req, res) => {
    const username = req.body.username
    const password = req.body.password
    const hashed_password = CryptoJS.SHA256(password).toString();
    const sql = "INSERT INTO users (username, password) VALUES (?, ?)"
    db.run(sql, [username,hashed_password], function(err){
          if(err){
              res.send(JSON.stringify({status: "Error Registering"}))
          }
          res.send(JSON.stringify({status: "User Created"}))
      })
  })

app.post('/login', (req, res) => {
    const username = req.body.username
    const password = req.body.password
    const hashed_password = CryptoJS.SHA256(password).toString();
let token = generateAccessToken(username)
    console.log(token)
    const sql = "SELECT * from users WHERE username = ?"
    db.get(sql,[username], function(err, row){
        console.log(row);
      if(username == row.username && hashed_password == row.password) {
          res.send(JSON.stringify({status: "Logged in",jwt:token}));
      }else {
          res.send(JSON.stringify({status: "Wrong credentials"}));
      }
    }) 
  })

app.listen(port, () => {
  console.log(Example app listening on port ${port})
})