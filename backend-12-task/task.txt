üëâ You need to develop an API for a blog in Node.js


Requirements:

The application is a page on which any authorized users can make entries.

1. It is necessary to implement registration and authorization of the user, as well as verification of the JWT token when making entries on the page
2. The blog entry contains:
     1. Recording date
     2. Message: can contain both text and media
     3. Author of the message
3. Pagination should be implemented on the page with posts, 20 posts should be displayed on each page (pagination)
4. Post author can edit or delete post
5. The database must be filled with start records
6. You need to deploy the server for public access
7. You need to write documentation for endpoints (manually or generate from code)

Can be used:

- Database can be PostgreSQL or MongoDB
- Possibility of express
- Libraries for working with ORM
- TypeScript (will be a plus)

Can not use:

- Nuxt.js / Next.js

Criteria for evaluation:

- Performance according to the TOR
- Solution architecture
- Code cleanliness
- Ease of checking

Technical Task junior/middle NodeJS Developer
________________________________________________________________________________________

üëâ ‘¥’∏÷Ç÷Ñ ’∫’•’ø÷Ñ ’ß ’¥’∑’°’Ø’•÷Ñ API ’¢’¨’∏’£’´ ’∞’°’¥’°÷Ä Node.js-’∏÷Ç’¥


’ä’°’∞’°’∂’ª’∂’•÷Ä:

’Ä’°’æ’•’¨’æ’°’Æ’® ’ß’ª ’ß, ’∏÷Ä’ø’•’≤ ÷Å’°’∂’Ø’°÷Å’°’Æ ’¨’´’°’¶’∏÷Ä’æ’°’Æ ÷Ö’£’ø’°’ø’•÷Ä ’Ø’°÷Ä’∏’≤ ’ß ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’Ø’°’ø’°÷Ä’•’¨:

1. ‘∑’ª’∏÷Ç’¥ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’Ø’°’ø’°÷Ä’•’¨’´’Ω ’°’∂’∞÷Ä’°’™’•’∑’ø ’ß ’´÷Ä’°’Ø’°’∂’°÷Å’∂’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’£÷Ä’°’∂÷Å’∏÷Ç’¥ ÷á ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂, ’´’∂’π’∫’•’Ω ’∂’°÷á JWT ’∂’∑’°’∂’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥÷â
2. ‘≤’¨’∏’£’´ ’£÷Ä’°’º’∏÷Ç’¥’® ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’¥ ’ß.
      1. ’Å’°’µ’∂’°’£÷Ä’¥’°’∂ ’°’¥’Ω’°’©’´’æ
      2. ’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂. ’Ø’°÷Ä’∏’≤ ’ß ’∫’°÷Ä’∏÷Ç’∂’°’Ø’•’¨ ÷á’õ ’ø’•÷Ñ’Ω’ø, ÷á’õ ’¥’•’§’´’°
      3. ’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂ ’∞’•’≤’´’∂’°’Ø
3. ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’∏÷Ç’∂’•÷Å’∏’≤ ’ß’ª’∏÷Ç’¥ ’∫’•’ø÷Ñ ’ß ’´÷Ä’°’Ø’°’∂’°÷Å’æ’´ ’ß’ª’°’æ’∏÷Ä’∏÷Ç’¥, ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’ß’ª’∏÷Ç’¥ ÷Å’∏÷Ç÷Å’°’§÷Ä’æ’´ 20 ’£÷Ä’°’º’∏÷Ç’¥ (’ß’ª’°’§÷Ä’∏÷Ç’¥)
4. ‘≥÷Ä’°’º’¥’°’∂ ’∞’•’≤’´’∂’°’Ø’® ’Ø’°÷Ä’∏’≤ ’ß ’≠’¥’¢’°’£÷Ä’•’¨ ’Ø’°’¥ ’ª’∂’ª’•’¨ ’£÷Ä’°’º’∏÷Ç’¥’®
5. ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’∂ ’∫’•’ø÷Ñ ’ß ’¨÷Ä’°÷Å’æ’´ ’¥’•’Ø’∂’°÷Ä’Ø’°’µ’´’∂ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’∏’æ
6. ‘¥’∏÷Ç÷Ñ ’∫’•’ø÷Ñ ’ß ’ø’•’≤’°’Ø’°’µ’•÷Ñ ’Ω’•÷Ä’æ’•÷Ä’® ’∞’°’∂÷Ä’°’µ’´’∂ ’¥’∏÷Ç’ø÷Ñ’´ ’∞’°’¥’°÷Ä
7. ’Å’•’¶ ’°’∂’∞÷Ä’°’™’•’∑’ø ’ß ÷É’°’Ω’ø’°’©’≤’©’•÷Ä ’£÷Ä’•’¨ ’æ’•÷Ä’ª’∂’°’Ø’•’ø’•÷Ä’´ ’∞’°’¥’°÷Ä (’±’•’º÷Ñ’∏’æ ’Ø’°’¥ ’Ω’ø’•’≤’Æ’•’¨ ’Ø’∏’§’´÷Å)

‘ø’°÷Ä’∏’≤ ’ß ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’•’¨:

- ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’∂ ’Ø’°÷Ä’∏’≤ ’ß ’¨’´’∂’•’¨ PostgreSQL ’Ø’°’¥ MongoDB
- ‘∑÷Ñ’Ω’∫÷Ä’•’Ω’´ ’∞’∂’°÷Ä’°’æ’∏÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
- ‘≥÷Ä’°’§’°÷Ä’°’∂’∂’•÷Ä ORM-’´ ’∞’•’ø ’°’∑’≠’°’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä
- TypeScript (’Ø’¨’´’∂’´ ’£’∏÷Ç’¥’°÷Ä’°’Æ)

’Ä’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨.

- Nuxt.js / Next.js

‘≥’∂’°’∞’°’ø’¥’°’∂ ’π’°÷É’°’∂’´’∑’∂’•÷Ä.

- ‘ø’°’ø’°÷Ä’∏÷Ç’¥’® ’®’Ω’ø TOR-’´
- ‘º’∏÷Ç’Æ’∏÷Ç’¥’∂’•÷Ä’´ ’≥’°÷Ä’ø’°÷Ä’°’∫’•’ø’∏÷Ç’©’µ’∏÷Ç’∂
- ‘ø’∏’§’•÷Ä’´ ’¥’°÷Ñ÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
- ’ç’ø’∏÷Ç’£’¥’°’∂ ’∞’•’∑’ø’∏÷Ç’©’µ’∏÷Ç’∂

Technical Task ’Ø÷Ä’ø’Ω’•÷Ä/’¥’´’ª’´’∂ NodeJS ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’∏’≤